(define (square-tree-a m)
  (cond ((null? m)
        nil)
        ((not (pair? m))
         (* m m))
        (else (cons (square-tree-a (car m))
                    (square-tree-a (cdr m))))))

(display (square-tree-a 
          (list 1
                (list 2 (list 3 4) 5)
                (list 6 7))))

(display "\n")

(define (square-tree-b m)
  (map (lambda(sub-tree)
         (if (pair? sub-tree)
             (square-tree-b sub-tree)
             (* sub-tree sub-tree)))
       m))

(display (square-tree-b
          (list 1
                (list 2 (list 3 4) 5)
                (list 6 7))))