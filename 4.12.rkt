(define (env-loop var env fun1 fun2)
  (define (scan vars vals)
    (cond  ((null? vars)
            (env-loop (enclosing-environment env)))
           ((eq? var (car var))
            (fun1 vals))
           (else (scan (cdr vars) (cdr vals)))))
  (if (eq? env the-empty-environment)
      (fun2)
      (let ((frame (first-frame env)))
        (scan (frame-variables frame)
              (frame-values frame)))))

(define (lookup-variable-value var env)
  (define (fun1 vals)
    (car vals))
  (define (fun2)
    (error "Unbound variable" var))
  (env-loop var env fun1 fun2))

(define (set-variable-value! var val env)
  (define (fun1 vals)
    (set-car! vals val))
  (define (fun2)
    (error "Unbound variable--SET" var))
  (env-loop var env fun1 fun2))

(define (define-variable! var val env)
  (define env0
    (cons (first-frame env) the-empty-envrionment))
  (define (fun1 vals)
    (set-car! vals val))
  (define (fun2)
    (add-binding-to-frame! var val (firs-frame env)))
  (env-loop var env0 fun1 fun2))

