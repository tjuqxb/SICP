#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 2574 0 17 3 47
(
 #";\347\254\254\344\270\200\350\241\214\347"
 #"\232\204\346\217\220\345\211\215\345"
 #"\256\232\344\271\211\345\237\272\344\272\216\350\277"
 #"\231\346\240\267\347\232\204\345\216\237\347\220\206:"
) 0 0 22 29 1 #"\n"
0 0 17 3 216
(
 #";\346\240\271\346\215\256DEFIN"
 #"E\347\232\204\345\256\232\344\271\211\357\274"
 #"\214\346\210\221\344\273\254\345\217\257\344\273"
 #"\245\346\270\205\346\231\260\345\234\260\347\234"
 #"\213\345\210\260\357\274\214\345\246\202\346\236"
 #"\234DEFINE\345\220\216\350\267"
 #"\237\347\235\200\347\232\204\346\230\257\344\270"
 #"\200\344\270\252\345\207\275\346\225\260\345\256"
 #"\232\344\271\211\357\274\214\345\210\231\345\207"
 #"\275\346\225\260\344\275\223\344\274\232\345\222"
 #"\214\345\275\223\346\227\266\347\216\257\345\242"
 #"\203\346\211\223\345\214\205\357\274\214\344\270"
 #"\215\345\201\232\346\261\202\345\200\274\343\200"
 #"\202\344\275\206\347\216\257\345\242\203\345\205"
 #"\266\345\256\236\346\230\257\346\214\207\351\222"
 #"\210\357\274\214\347\224\261define!\345\222\214s"
 #"et-variable!\346\223\215\344\275\234"
) 0 0 22 29 1 #"\n"
0 0 17 3 199
(
 #";\346\211\200\344\273\245\345\246\202\346\236"
 #"\234\345\220\216\347\273\255\345\257\271\345\207"
 #"\275\346\225\260\344\275\223\345\206\205\347\232"
 #"\204\346\234\252\345\256\232\344\271\211\345\207"
 #"\275\346\225\260\350\277\233\350\241\214\345\256"
 #"\232\344\271\211\346\227\266\357\274\214\347\216"
 #"\257\345\242\203\346\230\257\344\274\232\346\233"
 #"\264\346\226\260\347\232\204\357\274\214\345\215"
 #"\263\345\214\205\345\206\205\347\216\257\345\242"
 #"\203\344\271\237\346\233\264\346\226\260\344\272"
 #"\206\343\200\202\350\277\231\346\240\267\345\234"
 #"\250\346\261\202\350\247\243\345\275\223\346\227"
 #"\266\346\234\252\345\256\232\344\271\211\345\207"
 #"\275\346\225\260\346\227\266\344\270\215"
 #"\344\274\232\345\207\272\347\216\260\346\234\252\347\237\245\345"
 #"\207\275\346\225\260\347\232\204\346\203\205\345\206\265\343\200\202"
) 0 0 22 29 1 #"\n"
0 0 17 3 193
(
 #";\350\200\214DEFINE\345\220"
 #"\216\346\230\257\347\254\246\345\217\267\346\227"
 #"\266\357\274\214\344\270\215\344\274\232\347\224"
 #"\250LAMBDA\345\257\271\345\207"
 #"\275\346\225\260\344\275\223\346\211\223\345\214"
 #"\205\357\274\214\350\200\214\346\230\257\347\233"
 #"\264\346\216\245\346\261\202\345\200\274\357\274"
 #"\214\350\277\231\346\240\267\357\274\214\347\274"
 #"\226\350\257\221\346\227\266\346\234\252\347\237"
 #"\245\347\232\204\345\207\275\346\225\260\344\274"
 #"\232\345\217\221\345\207\272\350\255\246\345\221"
 #"\212\357\274\214\346\227\240\346\263\225\347\274"
 #"\226\350\257\221\351\200\232\350\277\207\357\274"
 #"\214\350\200\214\345\267\262\347\237"
 #"\245\347\232\204\345\207\275\346\225\260\344\274\232\347"
 #"\233\264\346\216\245\347\273\221\345\256\232\343\200\202"
) 0 0 22 29 1 #"\n"
0 0 17 3 235
(
 #";\350\277\231\346\240\267\357\274\214\345\217"
 #"\252\346\234\211\345\234\250\346\210\221\344\273"
 #"\254\345\256\232\344\271\211APPLY"
 #"\345\211\215\351\207\207\347\224\250\347\254\246"
 #"\345\217\267\347\233\264\346\216\245\345\256\232"
 #"\344\271\211APPLY\346\211\215\350"
 #"\203\275\344\277\235\345\255\230\347\263\273\347"
 #"\273\237\347\232\204APPLY\357\274"
 #"\214\345\205\266\344\273\226\347\232\204\344\273"
 #"\273\344\275\225\346\226\271\346\263\225\357\274"
 #"\210\345\215\263\346\227\240\350\256\272\345\234"
 #"\250\344\273\200\344\271\210\344\275\215\347\275"
 #"\256\347\224\250\345\207\275\346\225\260\350\200"
 #"\214\344\270\215\346\230\257\347\224\250\347\254"
 #"\246\345\217\267\345\256\232\344\271\211AP"
 #"PLY\346\210\226\350\200\205\345\234\250"
 #"\346\210\221\344\273\254\345\256\232\344"
 #"\271\211APPLY\344\271\213\345\220\216\347\224\250"
 #"\347\254\246\345\217\267\345\256\232\344\271\211APPLY"
) 0 0 22 29 1 #"\n"
0 0 17 3 80
(
 #";\351\203\275\345\217\252\344\274\232\345\222"
 #"\214\346\210\221\344\273\254\350\207\252\345\267"
 #"\261\345\256\232\344\271\211\347\232\204AP"
 #"PLY\347\273\221\345\256\232\357\274"
 #"\214\350\200\214\344\270\215\346\230\257\345\222\214\347\263\273"
 #"\347\273\237APPLY\347\273\221\345\256\232\343\200\202"
) 0 0 22 29 1 #"\n"
0 0 17 3 232
(
 #";\345\217\246\345\244\226\345\207\275\346\225"
 #"\260\346\261\202\345\200\274\347\232\204\347\211"
 #"\271\346\256\212\346\200\247\350\264\250\350\277"
 #"\230\345\234\250\344\272\216\357\274\214\346\261"
 #"\202\350\247\243\346\227\266\351\207\207\347\224"
 #"\250EXTEND\346\226\271\346\263"
 #"\225\346\211\251\345\205\205\345\216\237\347\216"
 #"\257\345\242\203\350\200\214\344\270\215\346\230"
 #"\257\345\257\271\345\216\237\347\216\257\345\242"
 #"\203\346\214\207\351\222\210\350\277\233\350\241"
 #"\214\346\224\271\345\217\230\343\200\202\346\211"
 #"\200\344\273\245\345\220\214\344\270\200\347\216"
 #"\257\345\242\203\344\270\213\345\257\271\344\270"
 #"\215\345\220\214\345\207\275\346\225\260\347\232"
 #"\204\346\261\202\345\200\274\345\217\257\344\273"
 #"\245\350\247\206\344\275\234\345\234\250\345\216"
 #"\237\345\207\275\346\225\260\347\216\257"
 #"\345\242\203\344\270\213\351\225\277\345\207\272\347\232\204"
 #"\344\270\215\345\220\214\345\210\206\346\224\257\343\200\202"
) 0 0 22 29 1 #"\n"
0 0 17 3 248
(
 #";\350\200\214\344\270\215\345\220\214\345\207"
 #"\275\346\225\260\344\271\213\351\227\264\345\205"
 #"\261\344\272\253\342\200\234\345\217\202\346\225"
 #"\260\342\200\235\347\232\204\346\226\271\346\263"
 #"\225\357\274\214\351\231\244\344\272\206\344\275"
 #"\277\347\224\250\347\254\246\345\217\267\345\205"
 #"\261\344\272\253\345\244\226\357\274\214\350\277"
 #"\230\345\217\257\344\275\277\347\224\250compound-proced"
 #"ure\347\232\204\346\226\271\346\263\225"
 #"\347\255\211\357\274\214\345\215\263\344\273\273"
 #"\344\275\225\345\217\257\344\273\245\347\233\264"
 #"\346\216\245EVAL\345\276\227\345\210"
 #"\260\347\273\223\346\236\234\345\271\266\347\273"
 #"\221\345\256\232\345\217\202\346\225\260\347\232"
 #"\204\350\241\250\350\276\276\345\274\217\357\274"
 #"\214\350\200\214\344\270\215\346\230\257LA"
 #"MBDA\344\275\223\345\206\205"
 #"\347\232\204\350\277\207\347\250\213\343\200\202\345\233\240\344"
 #"\270\272LAMBDA\345\217\252\346\234\211\345\234\250"
) 0 0 22 29 1 #"\n"
0 0 17 3 244
(
 #";compound-procedure\345\206\205\346\211\215"
 #"\344\274\232\350\247\243\345\214\205\357\274\214"
 #"\350\200\214\345\246\202\346\236\234\346\234\211"
 #"\344\270\244\345\261\202\344\273\245\344\270\212"
 #"\347\232\204\345\244\226\345\233\264\347\216\257"
 #"\345\242\203\347\232\204\350\257\235\345\220\214"
 #"\345\220\215\345\217\202\346\225\260\345\217\257"
 #"\350\203\275\345\267\262\347\273\217\350\246\206"
 #"\347\233\226\346\216\211\346\210\221\344\273\254"
 #"\346\203\263\350\246\201\344\274\240\351\200\222"
 #"\347\232\204\345\217\202\346\225\260\357\274\210"
 #"\350\247\201\350\256\262\345\272\247\357\274\211"
 #"\357\274\214\346\210\226\350\200\205\346\240\271"
 #"\346\234\254\345\260\261\346\262\241\346\234\211"
 #"\347\273\221\345\256\232\350\246\201\344\274\240"
 #"\351\200\222\347\232\204\345\217\202\346\225\260"
 #"\357\274\214\345\215\263\347\233\270"
 #"\351\232\224\344\270\200\345\261\202\346\230\257\346\227\240"
 #"\346\263\225\344\274\240\351\200\222\347\232\204\343\200\202"
) 0 0 22 29 1 #"\n"
0 0 17 3 16 #";(define (add x)"
0 0 22 29 1 #"\n"
0 0 17 3 14 #";  (cons x y))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 16 #";(define (m a y)"
0 0 22 29 1 #"\n"
0 0 17 3 11 #";  (add a))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 8 #";(m 1 2)"
0 0 22 29 1 #"\n"
0 0 17 3 248
(
 #";\344\270\212\351\235\242\350\277\231\344\270"
 #"\200\346\256\265\345\234\250\346\210\221\344\273"
 #"\254\350\207\252\345\267\261\345\206\231\347\232"
 #"\204\345\205\203\345\276\252\347\216\257\346\261"
 #"\202\345\200\274\345\231\250\344\270\255\346\230"
 #"\257\345\217\257\344\273\245\347\274\226\350\257"
 #"\221\351\200\232\350\277\207\347\232\204\357\274"
 #"\214\344\275\206(m 1 2)\344"
 #"\274\232\345\207\272\347\216\260y\346\234\252"
 #"\347\273\221\345\256\232\347\232\204\346\203\205"
 #"\345\206\265\357\274\214\345\233\240\344\270\272"
 #"\345\256\236\351\231\205\344\270\212\346\230\257"
 #"\346\227\240\346\263\225\351\232\224\345\261\202"
 #"\344\274\240\351\200\222\347\232\204\357\274\214"
 #"\344\270\255\351\227\264\350\277\231\344\270\200"
 #"\345\261\202\345\217\252\346\234\211\344\275\277"
 #"\347\224\250\345\217\202\346\225\260y\344\274"
 #"\240\351\200\222\346\211\215\350\203\275\345"
 #"\220\221\344\270\213\344\274\240\351\200\222\343\200\202\345\234"
 #"\250racket\347\216\257\345\242\203\344\270\255."
) 0 0 22 29 1 #"\n"
0 0 17 3 64
(
 #";\345\256\236\351\231\205\344\270\212(define (add x)"
 #" (cons x y))\346\230\257\346\227\240\346"
 #"\263\225\347\274\226\350\257\221\351\200"
 #"\232\350\277\207\347\232\204\343\200\202"
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 26 #"apply-in-underlying-scheme"
0 0 22 3 1 #" "
0 0 14 3 5 #"apply"
0 0 22 3 1 #")"
0 0 17 3 151
(
 #";\345\256\232\344\271\211\345\234\250\346\210"
 #"\221\344\273\254\345\256\232\344\271\211ap"
 #"ply\346\261\202\345\200\274\345\231\250"
 #"\344\271\213\345\211\215,\345\233\240\344\270"
 #"\272\346\210\221\344\273\254\345\221\275\345\220"
 #"\215\344\270\272APPLY\345\256\232"
 #"\344\271\211\346\230\257\346\250\241\344\273\277"
 #"\345\216\237SCHEME\347\232\204APPLY\345\256\232\344\271\211,\344"
 #"\270\272\351\230\262\346\255\242\345\206"
 #"\262\347\252\201\343\200\202e.g. (apply + (list 4 6))"
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 22 3 1 #" "
0 0 14 3 9 #"procedure"
0 0 22 3 1 #" "
0 0 14 3 9 #"arguments"
0 0 22 3 1 #")"
0 0 17 3 116
(
 #";not so clear about compound-procedure:allows procedure to evaluate "
 #"different expressions,but only returns the last."
) 0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 20 #"primitive-procedure?"
0 0 22 3 1 #" "
0 0 14 3 9 #"procedure"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 25 #"apply-primitive-procedure"
0 0 22 3 1 #" "
0 0 14 3 9 #"procedure"
0 0 22 3 1 #" "
0 0 14 3 9 #"arguments"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 19 #"compound-procedure?"
0 0 22 3 1 #" "
0 0 14 3 9 #"procedure"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 13 #"eval-sequence"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 14 #"procedure-body"
0 0 22 3 1 #" "
0 0 14 3 9 #"procedure"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 18 #"extend-environment"
0 0 22 3 29 #"                             "
0 0 17 3 117
(
 #";when evaluate a compound procedure,add a new environment to the clo"
 #"sure-packed environment,meanwhile,the procedure's"
) 0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 20 #"procedure-parameters"
0 0 22 3 1 #" "
0 0 14 3 9 #"procedure"
0 0 22 3 16 #")               "
0 0 17 3 115
(
 #";parameters and arguments are the first to be binded in the new envi"
 #"ronment.The overriding of the parameters of the"
) 0 0 22 29 1 #"\n"
0 0 22 3 11 #"           "
0 0 14 3 9 #"arguments"
0 0 22 3 38 #"                                      "
0 0 17 3 118
(
 #";same name could rise bugs,which should be taken care of.Use closure"
 #" wisely;an early attempt to evaluate the arguments"
) 0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 21 #"procedure-environment"
0 0 22 3 1 #" "
0 0 14 3 9 #"procedure"
0 0 22 3 15 #"))))           "
0 0 17 3 105
(
 #";using a compound procedure could pass the right value from the orig"
 #"in environment.See the lecture video."
) 0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 5 #"error"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 19 3 30 #"\"Unkown procedure type--APPLY\""
0 0 22 3 1 #" "
0 0 14 3 9 #"procedure"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 16 #"self-evaluating?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #") "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 9 #"variable?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 21 #"lookup-variable-value"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 7 #"quoted?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 17 #"text-of-quotation"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 11 #"assignment?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 15 #"eval-assignment"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 15 3 11 #"definition?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 15 #"eval-definition"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 3 #"if?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 7 #"eval-if"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 7 #"unless?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 4 #"eval"
0 0 22 3 2 #" ("
0 0 14 3 10 #"unless->if"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 7 #"lambda?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 14 #"make-procedure"
0 0 22 3 2 #" ("
0 0 14 3 17 #"lambda-parameters"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ("
0 0 14 3 11 #"lambda-body"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 14 #")             "
0 0 17 3 27 #";in syntax,its form is list"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                          "
0 0 14 3 3 #"env"
0 0 22 3 27 #"))                         "
0 0 17 3 45 #";lambda expression and environment -> closure"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 15 3 6 #"begin?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 13 #"eval-sequence"
0 0 22 3 2 #" ("
0 0 15 3 13 #"begin-actions"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 5 #"cond?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 4 #"eval"
0 0 22 3 2 #" ("
0 0 14 3 8 #"cond->if"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 12 #"application?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 5 #"apply"
0 0 22 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 22 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 14 #"list-of-values"
0 0 22 3 2 #" ("
0 0 14 3 8 #"operands"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 8 #")))     "
0 0 17 3 67
#";evaluate the arguments before the extending-environment procedure."
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 4 #"else"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 9 #"\"Unkonwn\""
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 7 #"unless?"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 15 3 6 #"unless"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 16 #"unless-predicate"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 18 #"unless-consequence"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"cdddr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 6 #"cadddr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 18 #"unless-alternative"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 5 #"caddr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 10 #"unless->if"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 7 #"make-if"
0 0 22 3 2 #" ("
0 0 14 3 16 #"unless-predicate"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #") ("
0 0 14 3 18 #"unless-consequence"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #") ("
0 0 14 3 18 #"unless-alternative"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 14 #"list-of-values"
0 0 22 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 12 #"no-operands?"
0 0 22 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 20 3 1 #"'"
0 0 22 3 2 #"()"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 22 3 2 #" ("
0 0 14 3 13 #"first-operand"
0 0 22 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 14 #"list-of-values"
0 0 22 3 2 #" ("
0 0 14 3 13 #"rest-operands"
0 0 22 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 13 #"rest-operands"
0 0 22 3 1 #" "
0 0 14 3 3 #"ops"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 3 #"ops"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 7 #"eval-if"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 5 #"true?"
0 0 22 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 22 3 2 #" ("
0 0 14 3 12 #"if-predicate"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"eval"
0 0 22 3 2 #" ("
0 0 14 3 13 #"if-consequent"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"eval"
0 0 22 3 2 #" ("
0 0 14 3 14 #"if-alternative"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 14 #"if-alternative"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"cdddr"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 6 #"cadddr"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 13 #"eval-sequence"
0 0 22 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 17 3 100
(
 #";not so clear about compound-procedure:compound-procedure only retur"
 #"ns the last expression's result."
) 0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 9 #"last-exp?"
0 0 22 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 3 #") ("
0 0 14 3 4 #"eval"
0 0 22 3 2 #" ("
0 0 14 3 9 #"first-exp"
0 0 22 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 22 3 2 #" ("
0 0 14 3 9 #"first-exp"
0 0 22 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 13 #"eval-sequence"
0 0 22 3 2 #" ("
0 0 14 3 9 #"rest-exps"
0 0 22 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 15 #"eval-assignment"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 20 #")                   "
0 0 17 3 27 #";assigned in the firstframe"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 20 #"set-variable-values!"
0 0 22 3 2 #" ("
0 0 14 3 19 #"assignment-variable"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 24 #"                       ("
0 0 14 3 4 #"eval"
0 0 22 3 2 #" ("
0 0 14 3 16 #"assignment-value"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                       "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 20 3 1 #"'"
0 0 14 3 2 #"ok"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 15 #"eval-definition"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 20 #")                   "
0 0 17 3 27 #";defined in the first frame"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 16 #"define-variable!"
0 0 22 3 2 #" ("
0 0 15 3 19 #"definition-variable"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 4 #"eval"
0 0 22 3 2 #" ("
0 0 15 3 16 #"definition-value"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                     "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 20 3 1 #"'"
0 0 14 3 2 #"ok"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 16 #"self-evaluating?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 7 #"number?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #") "
0 0 20 3 2 #"#t"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 7 #"string?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #") "
0 0 20 3 2 #"#t"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"variable?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 7 #"symbol?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 7 #"quoted?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"quote"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 17 #"text-of-quotation"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 5 #"))   "
0 0 17 3 13 #";(quote a) 'a"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"tagged-list?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 14 3 3 #"tag"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #") "
0 0 14 3 3 #"tag"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 14 3 5 #"false"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 11 #"assignment?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"set!"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 19 #"assignment-variable"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 16 #"assignment-value"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 15 3 11 #"definition?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 15 3 6 #"define"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 15 3 19 #"definition-variable"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 5 #"caadr"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 15 3 16 #"definition-value"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 5 #"caddr"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 11 #"make-lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"cdadr"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #") "
0 0 17 3 35 #";formal parameters:stored as a list"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ("
0 0 14 3 4 #"cddr"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 5 #")))) "
0 0 17 3 110
(
 #";body:stored as a list,which has not to be a single procedure in syn"
 #"tax,i.e. compound-procedure ,cond, lambda."
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 7 #"lambda?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 15 3 6 #"lambda"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 17 #"lambda-parameters"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 11 #"lambda-body"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 4 #"cddr"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 11 #"make-lambda"
0 0 22 3 1 #" "
0 0 14 3 10 #"parameters"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 14 3 10 #"parameters"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 4 #"))) "
0 0 17 3 86
(
 #"; like compound-procedure, which can be \"compound\",but only to ret"
 #"urn the last result."
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 3 #"if?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"if"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"if-predicate"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 13 #"if-consequent"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 7 #"make-if"
0 0 22 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 22 3 1 #" "
0 0 14 3 10 #"consequent"
0 0 22 3 1 #" "
0 0 14 3 11 #"alternative"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"if"
0 0 22 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 22 3 1 #" "
0 0 14 3 10 #"consequent"
0 0 22 3 1 #" "
0 0 14 3 11 #"alternative"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 15 3 6 #"begin?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 15 3 5 #"begin"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 15 3 13 #"begin-actions"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"last-exp?"
0 0 22 3 1 #" "
0 0 14 3 3 #"seq"
0 0 22 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 3 #"seq"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"first-exp"
0 0 22 3 1 #" "
0 0 14 3 3 #"seq"
0 0 22 3 3 #") ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 3 #"seq"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"rest-exps"
0 0 22 3 1 #" "
0 0 14 3 3 #"seq"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 3 #"seq"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 13 #"sequence->exp"
0 0 22 3 1 #" "
0 0 14 3 3 #"seq"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 3 #"seq"
0 0 22 3 2 #") "
0 0 14 3 3 #"seq"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 9 #"last-exp?"
0 0 22 3 1 #" "
0 0 14 3 3 #"seq"
0 0 22 3 3 #") ("
0 0 14 3 9 #"first-exp"
0 0 22 3 1 #" "
0 0 14 3 3 #"seq"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 10 #"make-begin"
0 0 22 3 1 #" "
0 0 14 3 3 #"seq"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 10 #"make-begin"
0 0 22 3 1 #" "
0 0 14 3 3 #"seq"
0 0 22 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 15 3 5 #"begin"
0 0 22 3 1 #" "
0 0 14 3 3 #"seq"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"application?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 5 #"pair?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 8 #"operands"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"no-operands?"
0 0 22 3 1 #" "
0 0 14 3 3 #"ops"
0 0 22 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 3 #"ops"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 13 #"first-operand"
0 0 22 3 1 #" "
0 0 14 3 3 #"ops"
0 0 22 3 3 #") ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 3 #"ops"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 5 #"cond?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 15 3 4 #"cond"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"cond-clauses"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 17 #"cond-else-clause?"
0 0 22 3 1 #" "
0 0 14 3 6 #"clause"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 14 #"cond-predicate"
0 0 22 3 1 #" "
0 0 14 3 6 #"clause"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 4 #"else"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 14 #"cond-predicate"
0 0 22 3 1 #" "
0 0 14 3 6 #"clause"
0 0 22 3 3 #") ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 6 #"clause"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"cond-actions"
0 0 22 3 1 #" "
0 0 14 3 6 #"clause"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 6 #"clause"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 7 #"cond-if"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 14 #"expand-clauses"
0 0 22 3 2 #" ("
0 0 14 3 12 #"cond-cluases"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 14 #"expand-clauses"
0 0 22 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 24 #"                        "
0 0 17 3 15 #";clause else no"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 5 #"first"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 4 #"rest"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 17 #"cond-else-clause?"
0 0 22 3 1 #" "
0 0 14 3 5 #"first"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 4 #"rest"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 13 #"sequence->exp"
0 0 22 3 2 #" ("
0 0 14 3 12 #"cond-actions"
0 0 22 3 1 #" "
0 0 14 3 5 #"first"
0 0 22 3 8 #"))      "
0 0 17 3 76
(
 #"; 'cond' is different from 'if' in syntax,so use sequence->exp to tr"
 #"ansform "
) 0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 34 #"\"ELSE clause isn't last--COND->IF\""
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                       "
0 0 14 3 7 #"caluses"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 7 #"make-if"
0 0 22 3 2 #" ("
0 0 14 3 14 #"cond-predicate"
0 0 22 3 1 #" "
0 0 14 3 5 #"first"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ("
0 0 14 3 13 #"sequence->exp"
0 0 22 3 2 #" ("
0 0 14 3 12 #"cond-actions"
0 0 22 3 1 #" "
0 0 14 3 5 #"first"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ("
0 0 14 3 14 #"expand-clauses"
0 0 22 3 1 #" "
0 0 14 3 4 #"rest"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 6 #";4.1.3"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 5 #"true?"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 6 #"false?"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 14 #"make-procedure"
0 0 22 3 1 #" "
0 0 14 3 10 #"parameters"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"procedure"
0 0 22 3 1 #" "
0 0 14 3 10 #"parameters"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 14 #"))            "
0 0 17 3 38 #";a closure with environment packed in "
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 19 #"compound-procedure?"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"procedure"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 20 #"procedure-parameters"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 14 #"procedure-body"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 2 #")("
0 0 14 3 5 #"caddr"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 21 #"procedure-environment"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 3 #") ("
0 0 14 3 6 #"cadddr"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 21 #"enclosing-environment"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 11 #"first-frame"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #") ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 21 #"the-empty-environment"
0 0 22 3 1 #" "
0 0 14 3 3 #"nil"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 10 #"make-frame"
0 0 22 3 1 #" "
0 0 14 3 9 #"variables"
0 0 22 3 1 #" "
0 0 14 3 6 #"values"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 14 3 9 #"variables"
0 0 22 3 1 #" "
0 0 14 3 6 #"values"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 15 #"frame-variables"
0 0 22 3 1 #" "
0 0 14 3 5 #"frame"
0 0 22 3 3 #") ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"frame"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"frame-values"
0 0 22 3 1 #" "
0 0 14 3 5 #"frame"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 5 #"frame"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 21 #"add-binding-to-frame!"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 5 #"frame"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 8 #"set-car!"
0 0 22 3 1 #" "
0 0 14 3 5 #"frame"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"frame"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 8 #"set-cdr!"
0 0 22 3 1 #" "
0 0 14 3 5 #"frame"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 5 #"frame"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 18 #"extend-environment"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 1 #" "
0 0 14 3 8 #"base-env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 1 #"="
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 3 #") ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 10 #"make-frame"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 2 #") "
0 0 14 3 8 #"base-env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 1 #"<"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 3 #") ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 29 #"\"Too many arguments supplied\""
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 28 #"\"Too few arguments supplied\""
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 21 #"lookup-variable-value"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 8 #"env-loop"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 8 #"env-loop"
0 0 22 3 2 #" ("
0 0 14 3 21 #"enclosing-environment"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"            (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 21 #"the-empty-environment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 18 #"\"Unbound variable\""
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 5 #"frame"
0 0 22 3 2 #" ("
0 0 14 3 11 #"first-frame"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 4 #"scan"
0 0 22 3 2 #" ("
0 0 14 3 15 #"frame-variables"
0 0 22 3 1 #" "
0 0 14 3 5 #"frame"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 12 #"frame-values"
0 0 22 3 1 #" "
0 0 14 3 5 #"frame"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 8 #"env-loop"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 20 #"set-variable-values!"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 8 #"env-loop"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 8 #"env-loop"
0 0 22 3 2 #" ("
0 0 14 3 21 #"enclosing-environment"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"            (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 8 #"set-car!"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 21 #"the-empty-environment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 24 #"\"Unbound variable--SET!\""
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 5 #"frame"
0 0 22 3 2 #" ("
0 0 14 3 11 #"first-frame"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 4 #"scan"
0 0 22 3 2 #" ("
0 0 14 3 15 #"frame-variables"
0 0 22 3 1 #" "
0 0 14 3 5 #"frame"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 12 #"frame-values"
0 0 22 3 1 #" "
0 0 14 3 5 #"frame"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 8 #"env-loop"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 15 3 16 #"define-variable!"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 22 3 2 #"(("
0 0 14 3 5 #"frame"
0 0 22 3 2 #" ("
0 0 14 3 11 #"first-frame"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 21 #"add-binding-to-frame!"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 5 #"frame"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"            (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 8 #"set-car!"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 4 #"scan"
0 0 22 3 2 #" ("
0 0 14 3 15 #"frame-variables"
0 0 22 3 1 #" "
0 0 14 3 5 #"frame"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 12 #"frame-values"
0 0 22 3 1 #" "
0 0 14 3 5 #"frame"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 6 #";4.1.4"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 20 #"primitive-procedures"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 3 #"car"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 14 3 4 #"cons"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 5 #"null?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 14 3 4 #"list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 1 #"="
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 1 #"*"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 1 #"-"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        ))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 25 #"primitive-procedure-names"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 22 3 1 #" "
0 0 14 3 3 #"car"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 14 3 20 #"primitive-procedures"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 27 #"primitive-procedure-objects"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 4 #"proc"
0 0 22 3 3 #") ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"primitive"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 4 #"proc"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 14 3 20 #"primitive-procedures"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 17 #"setup-environment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 11 #"initial-env"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 18 #"extend-environment"
0 0 22 3 2 #" ("
0 0 14 3 25 #"primitive-procedure-names"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ("
0 0 14 3 27 #"primitive-procedure-objects"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                             "
0 0 14 3 21 #"the-empty-environment"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 16 #"define-variable!"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #" "
0 0 14 3 11 #"initial-env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 16 #"define-variable!"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 1 #" "
0 0 14 3 11 #"initial-env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 14 3 11 #"initial-env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 22 #"the-global-environment"
0 0 22 3 2 #" ("
0 0 14 3 17 #"setup-environment"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 20 #"primitive-procedure?"
0 0 22 3 1 #" "
0 0 14 3 4 #"proc"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 22 3 1 #" "
0 0 14 3 4 #"proc"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"primitive"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 24 #"primitive-implementation"
0 0 22 3 1 #" "
0 0 14 3 4 #"proc"
0 0 22 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 4 #"proc"
0 0 22 3 3 #")) "
0 0 17 3 35 #";e.g.(('null?)(('primitive null?)))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #" "
0 0 17 3 197
(
 #";(define apply-in-underly"
 #"ing-scheme apply) \345\256\232\344\271\211\345"
 #"\234\250\346\210\221\344\273\254\345\256\232\344"
 #"\271\211apply\346\261\202\345\200"
 #"\274\345\231\250\344\271\213\345\211\215\357\274"
 #"\214\345\233\240\344\270\272\346\210\221\344\273"
 #"\254\345\221\275\345\220\215\344\270\272AP"
 #"PLY\345\256\232\344\271\211\346\230\257"
 #"\346\250\241\344\273\277\345\216\237SCHEME\347\232\204APPLY\345\256"
 #"\232\344\271\211\357\274\214\344\270\272\351\230"
 #"\262\346\255\242\345\206\262\347\252\201\343\200\202e.g. ("
 #"apply + (list 4 6))"
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 25 #"apply-primitive-procedure"
0 0 22 3 1 #" "
0 0 14 3 4 #"proc"
0 0 22 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 4 #")   "
0 0 17 3 84
(
 #";process under apply process,i.e. apply twice to access the primitiv"
 #"e implementation"
) 0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 26 #"apply-in-underlying-scheme"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 24 #"primitive-implementation"
0 0 22 3 1 #" "
0 0 14 3 4 #"proc"
0 0 22 3 2 #") "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"input-prompt"
0 0 22 3 1 #" "
0 0 19 3 18 #"\";;;M-Eval input:\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 13 #"output-prompt"
0 0 22 3 1 #" "
0 0 19 3 18 #"\";;;M-Eval value:\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 11 #"driver-loop"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 16 #"prompt-for-input"
0 0 22 3 1 #" "
0 0 14 3 12 #"input-prompt"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 5 #"input"
0 0 22 3 2 #" ("
0 0 14 3 4 #"read"
0 0 22 3 22 #")))                   "
0 0 17 3 53
(
 #";read \347\261\273\344\274\274  getchar()\357\274"
 #"\214\344\275\206\350\277\224\345\233\236\345\256\214\346"
 #"\225\264\350\241\250\350\276\276\345\274\217\343\200\202"
) 0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 6 #"output"
0 0 22 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 22 3 1 #" "
0 0 14 3 5 #"input"
0 0 22 3 1 #" "
0 0 14 3 22 #"the-global-environment"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 15 #"announce-output"
0 0 22 3 1 #" "
0 0 14 3 13 #"output-prompt"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 10 #"user-print"
0 0 22 3 1 #" "
0 0 14 3 6 #"output"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 11 #"driver-loop"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 16 #"prompt-for-input"
0 0 22 3 1 #" "
0 0 14 3 6 #"string"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 7 #"newline"
0 0 22 3 3 #") ("
0 0 14 3 7 #"newline"
0 0 22 3 3 #") ("
0 0 14 3 7 #"display"
0 0 22 3 1 #" "
0 0 14 3 6 #"string"
0 0 22 3 3 #") ("
0 0 14 3 7 #"newline"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 15 #"announce-output"
0 0 22 3 1 #" "
0 0 14 3 6 #"string"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 7 #"newline"
0 0 22 3 3 #") ("
0 0 14 3 7 #"display"
0 0 22 3 1 #" "
0 0 14 3 6 #"string"
0 0 22 3 3 #") ("
0 0 14 3 7 #"newline"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 10 #"user-print"
0 0 22 3 1 #" "
0 0 14 3 6 #"object"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 19 #"compound-procedure?"
0 0 22 3 1 #" "
0 0 14 3 6 #"object"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 7 #"display"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 18 #"compound-procedure"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ("
0 0 14 3 20 #"procedure-parameters"
0 0 22 3 1 #" "
0 0 14 3 6 #"object"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ("
0 0 14 3 14 #"procedure-body"
0 0 22 3 1 #" "
0 0 14 3 6 #"object"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                     "
0 0 20 3 1 #"'"
0 0 14 3 15 #"<procedure-env>"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 7 #"display"
0 0 22 3 1 #" "
0 0 14 3 6 #"object"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 22 #"the-global-environment"
0 0 22 3 2 #" ("
0 0 14 3 17 #"setup-environment"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 17 #";;(driver-loop)  "
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"            "
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0           0
