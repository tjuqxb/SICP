(cond ((assoc 'b '((a 1) (b 2))) => cadr)
      (else false))


(define (cond? exp) (tagged-list? exp 'cond))

(define (cond-clauses exp) (cdr exp))

(define (cond-else-clause? clause)
  (eq? (cond-predicate clause) 'else))

(define (cond-predicate clause) (car clause))

(define (cond-actions clause) (cdr clause))

(define (cond-if exp)
  (expand-clauses (cond-cluases exp)))

(define (expand-clauses clauses)
  (if (null? clauses)
      'false                        ;clause else no
      (let ((first (car clauses))
            (rest (cdr clauses)))
        (if (cond-else-clause? first)
            (if (null? rest)
                (sequence->exp (cond-actions first))
                (error "ELSE clause isn't last--COND->IF"
                       caluses))
            (make-if (cond-predicate first)
                     (cond ((eq? (car (cond-actions first)) '=>)
                            (list (cadr (cond-actions first))
                                  (sequence-exp (cond-predicate first))))
                           (else
                            (sequence->exp (cond-actions first))))
                     (expand-clauses rest))))))