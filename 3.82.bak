(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))


(define px
  (cons-stream (random-in-range x1 x2)
               px))

(define py
  (cons-stream (random-in-rangge y1 y2)
               py))

(define (p? x y)
  (let ((r (/ (smaller (- x2 x1) (- y2 y1)) 2)))
    (<= (+(square (- x 5)) (square (- y 7)))
        (square r))))

(define (get-s x-s y-s)
  (cons-stream (p? (stream-car x-s) (stream-car y-s))
               (get-s (stream-cdr x-s) (stream-cdr y-s))))

(define bool-s (get-s px py))

(define (acc-test s0 suc fail)
  (define (join suc fail)
    (cons-stream
     (suc/(+ suc fail))
     (acc-test (stream-cdr s0) suc fail)))
  (if (stream-car s0)
      (join (+ suc 1) fail)
      (join suc (+ fail 1))))

(define r (/ (smaller (- x2 x1) (- y2 y1)) 2))

(define pi-s
  (map-stream (lambda(x)
              (/ (* (- x2 x1) (- y2 y1)) 2))
              (acc-test bool-s 0 0)))

